\title{Credential Management}{creds}

\use-plugin{concourse-docs}
\split-sections

Going beyond \reference{encryption}, explicit credential management will
provide credentials to your builds for a brief amount of time, without being
persisted anywhere. It also allows for credentials to be rotated and managed
external to the pipeline or team, and prevents them from being revealed by
\reference{fly-get-pipeline}.

Credential management works by replacing the credentials with \code{((vars))}
in your pipeline or task config. When the Concourse is about to run the step or
\code{check} that is configured with vars, it will resolve them by fetching the
values from the credential manager. If the values are not present, the action
will error.

The following configurations can be parameterized with a credential manager:

\list{
  \reference{resource-source} under \reference{resources} in a pipeline
}{
  \reference{resource-type-source} under \reference{resource-types} in a
  pipeline
}{
  \reference{resource-webhook-token} under \reference{resources} in a
  pipeline
}{
  \reference{task-step-params} on a task step in a pipeline
}{
  \reference{tasks} in their entirety - whether from
  \reference{task-step-file} or \reference{task-step-config} in a pipeline,
  or a config executed with \reference{fly-execute}
}

Where these values are looked up and how the credential manager is configured
depends on the backend. Consult the relevant section below for whichever
backend you want to use.

Concourse currently supports the following credential managers:

\table-of-contents
\include-section{creds/vault.lit}
\include-section{creds/credhub.lit}
\include-section{creds/aws-ssm.lit}
\include-section{creds/aws-secretsmanager.lit}
\include-section{creds/kubernetes.lit}

\inline-header{Common Configuration Parameters}

When a request to the credential manager fails due to an intermittent error
(e.g. a timeout or \code{connection refused}), Concourse will automatically try
the request again up to 5 times before giving up. After all attempts fail, the
error will be surfaced in the UI for the resource check or build step that
initiated the request.

The retry logic can be configured by specifying the following env on the
\reference{web-node}:

\codeblock{bash}{{{
CONCOURSE_SECRET_RETRY_ATTEMPTS=5   # how many times to try
CONCOURSE_SECRET_RETRY_INTERVAL=10s # how long to wait between attempts
}}}
